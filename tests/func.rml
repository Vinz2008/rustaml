let f a = a + 1 ;;

let g fu = fu 1 ;;

let _ = g f ;;

let z = (function a -> a + 1) 2 ;;
let z2 = (function a -> a + 1) 3 ;;
let z3 = g (function a -> a + 1) ;;

// let y = 2 ;;
// let should_error = (function a -> a + y) 3 ;;

let _ = print [1, 2, 3, 4] ;;
let mapped = map [1, 2, 3, 4] (function a -> a * 2)  ;;
let _ = print mapped ;;

// TODO : add real generics (with indexes of any ?)


let _ = print [1.1, 2.2, 3.3, 4.4]  ;;
let mapped_f: list[float] = map [1.1, 2.2, 3.3, 4.4]  (function a -> a *. 2.0)  ;;
let _ = print mapped_f ;;

let list_to_filter = [1, 2, 3, 4] ;;
let _ = print list_to_filter ;;
let filtered = filter list_to_filter (function a : (int -> bool) -> a < 3) ;;
let _ = print filtered ;;
let filtered = filter list_to_filter (function a : (int -> bool) -> a != 2) ;;
let _ = print filtered ;;