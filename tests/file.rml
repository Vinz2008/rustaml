let test i : int -> int = 2 ;;

let a : int = test 3 ;;

let b : bool = true ;;

let test2 i = i + 2 ;;

// let fib i : int -> int = if i <= 1  i else fib (i - 1) + fib (i - 2) ;; 
let fib i : int -> int = if i <= 1 then i else fib (i - 1) + fib (i - 2)   ;;

let c = fib 14 ;;

// let c2 = fib 27 ;;

let f = 2.6 ;;

let test_f f_arg : float -> float = f_arg + 2.0 ;;

let test_match a_ : int -> int = 
  match a_ with 
  | 0 -> 1
  | 2..4 -> 4
  | 8=..10 -> 8
  | x -> 3
  ;;

let d = test_match 0 ;;
let e = test_match 1 ;;
let f = test_match 3 ;;

let g = let h = 7 in h - 2 ;;

let i = "aaa" ;;

let test_match_string s : str -> bool = 
    match s with
    | "hello" -> true
    | not_hello -> false ;;

let j = test_match_string "hello" ;;
let k = test_match_string "world" ;; 

let l = "hello" == "hello" ;;
let m = "hello" == "world" ;;


let o = "hello" ^ " " ^ "world" ;;

let test_inference_match s = 
  match s with
  | s -> if s == 2 then true else false ;;


let p = test_inference_match 3 ;;

let q = [2, 3, 4] ;;

let test_list a_ = 
  match a_ with
  | [] -> "empty"
  | [1, 2, 3] -> "1, 2, 3"
  | e :: l -> "list" ;;


let r = test_list [] ;;
let s = test_list [1, 2, 3] ;;
let s_two = test_list [1, 2] ;;

let append el l = el :: l ;;

let t = append 1 [] ;;

let append2 el2 l = el2 :: el2 :: l ;;

let u = append2 3 [4] ;;

let test_destructure a_ : list[int] -> list[int] =
  match a_ with
  | ee :: l -> ee ;;

let v = test_destructure [2] ;;